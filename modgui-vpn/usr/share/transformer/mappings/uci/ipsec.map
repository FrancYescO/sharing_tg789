local mapper = mapper
local config = "ipsec"

local ipsec_ipsec = {
  config = config,
  section = "ipsec",
  options = { "debug" , "rtinstall_enabled" },
  lists = { "interface", "ignore_routing_tables" }
}

local ipsec_remote = {
    config = config,
    type = "remote",
    options = { "enabled", "gateway", "local_identifier", "remote_identifier", "authentication_method", "pre_shared_key" },
    passwords = { "pre_shared_key" },
    lists = { "p1_proposal", "tunnel", "transport" }
}

local ipsec_p1proposal = {
    config = config,
    type = "p1_proposal",
    options = { "encryption_algorithm", "hash_algorithm", "dh_group" }
}

local ipsec_p2proposal = {
    config = config,
    type = "p2_proposal",
    options = { "pfs_group", "encryption_algorithm", "authentication_algorithm" }
}

local ipsec_tunnel = {
    config = config,
    type = "tunnel",
    options = { "mode", "local_subnet", "local_sourceip", "local_updown", "remote_subnet", "remote_sourceip", "remote_updown",
        "local_nat", "local_firewall", "remote_firewall", "p2_proposal", "ikelifetime", "lifetime", "margintime", "keyingtries",
        "dpdaction", "dpddelay", "inactivity", "keyexchange" }
}

local ipsec_transport = {
    config = config,
    type = "transport",
    options = { "mode", "local_subnet", "local_sourceip", "local_updown", "remote_subnet", "remote_sourceip", "remote_updown",
        "local_nat", "local_firewall", "remote_firewall", "ikelifetime", "lifetime", "margintime", "keyingtries",
        "dpdaction", "dpddelay", "inactivity", "keyexchange" }
}

mapper("uci_1to1").registerConfigMap(config)
mapper("uci_1to1").registerSimpleMap(ipsec_ipsec)
mapper("uci_1to1").registerNamedMultiMap(ipsec_remote)
mapper("uci_1to1").registerNamedMultiMap(ipsec_p1proposal)
mapper("uci_1to1").registerNamedMultiMap(ipsec_p2proposal)
mapper("uci_1to1").registerNamedMultiMap(ipsec_tunnel)
mapper("uci_1to1").registerNamedMultiMap(ipsec_transport)

